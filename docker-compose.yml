version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8003
    depends_on:
      - backend
    networks:
      - solar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8003
      - ALLOW_ALL_ORIGINS=true
    volumes:
      - ./backend/sheets_credentials.json:/app/sheets_credentials.json:ro
      - ./data:/app/data
      - ./email_templates:/app/email_templates:ro
    networks:
      - solar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - solar-network
    restart: unless-stopped
    profiles:
      - production

networks:
  solar-network:
    driver: bridge

# For development, use: docker-compose up
# For production with nginx: docker-compose --profile production up
